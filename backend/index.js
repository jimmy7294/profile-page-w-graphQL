async function getJWT(usernameOrEmail, password) {
  const signinEndpoint = "https://01.gritlab.ax/api/auth/signin";

  // Encode the username/email and password as base64
  const encodedCredentials = btoa(`${usernameOrEmail}:${password}`);

  // Make a POST request to the signin endpoint with the encoded credentials in the Authorization header
  const response = await fetch(signinEndpoint, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Basic ${encodedCredentials}`,
    },
  });

  // If the response is not successful, throw an error
  if (!response.ok) {
    throw new Error("Failed to obtain JWT");
  }

  // Parse the response as JSON
  const jsonResponse = await response.json();

  return jsonResponse;
}

async function ExecuteGraphQLQuery(jwt) {
  const url = "https://01.gritlab.ax/api/graphql-engine/v1/graphql";
  const query = `
    {
      user {
        id
        login
      }
    }
  `;

  const headers = {
    "Content-Type": "application/json",
    Authorization: `Bearer ${jwt}`,
  };

  const requestBody = {
    query: query,
  };

  try {
    const response = await fetch(url, {
      method: "POST",
      headers: headers, // pass the JWT in the headers of the request because the backend will check the JWT in the headers of the request to make sure the user is authenticated and authorized to access the data they are requesting 
      // the JWT is a string that is generated by the backend when the user signs in and is stored in the browser's local storage or session storage (in this case, local storage) 
      body: JSON.stringify(requestBody),
    });

    if (!response.ok) {
      throw new Error(`HTTP error: ${response.status}`);
    }

    const respData = await response.json();
    // console.log("respData:", respData);
    return JSON.stringify(respData); // this function returns a string using JSON.stringify which is a built-in function that converts a JavaScript object or value to a JSON string
  } catch (error) {
    console.error("Error:", error);
    return "";
  }
}


async function fetchTransactions(jwt) {
  const getTransactionsQuery = `
  {
    user: user_by_pk(id: 1182) {
      transactions(order_by: {createdAt: desc}) {
        createdAt
        type
        amount
        objectId
        userId
        path
        object {
          name
          type
        }
      }
    }
  }`;

  const url = "https://01.gritlab.ax/api/graphql-engine/v1/graphql";
  const headers = {
    "Content-Type": "application/json",
    Authorization: `Bearer ${jwt}`,
  };

  const requestBody = {
    query: getTransactionsQuery,
  };

  try {
    const response = await fetch(url, {
      method: "POST",
      headers: headers,
      body: JSON.stringify(requestBody),
    });
    
    if (!response.ok) {
      throw new Error(`HTTP error: ${response.status}`);
    }

    const respData = await response.json();
    console.log("respData:", respData);
    return JSON.stringify(respData);
  } catch (error) {
    console.error("Error:", error);
    return "";
  }
}

// Execute another different query with the same JWT for different data

async function main() {
  const usernameOrEmail = "minhtuann";
  const password = "Men0Grit!";

  try {
    const jwt = await getJWT(usernameOrEmail, password);
    // console.log("JWT:", jwt);

    // You can now use the JWT to call the executeGraphQLQuery function
    const responseData = await ExecuteGraphQLQuery(jwt);
    // color the response data and add boldness and the return value in the console
    console.log("%cExecuteGraphQLQuery:","color: red","font-weight: bold", responseData);
  } catch (error) {
    console.error("Error:", error);
  }

  try {
    const jwt = await getJWT(usernameOrEmail, password);
    // console.log("getting transactions with jwt", jwt);
    const transactions = await fetchTransactions(jwt);
    console.log("%cfetchTransactions:", "color: yellow", "font-weight: bold", transactions);
  } catch (error) {
    console.error("Error:", error);
  }
}

main();
